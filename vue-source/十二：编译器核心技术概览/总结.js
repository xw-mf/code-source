/*
    在本章中，我们首先讨论了 Vue.js 模板编译器的工作流程。Vue.js
的模板编译器用于把模板编译为渲染函数。它的工作流程大致分为三
个步骤。
        (1) 分析模板，将其解析为模板 AST。
        (2) 将模板 AST 转换为用于描述渲染函数的 JavaScript AST。
        (3) 根据 JavaScript AST 生成渲染函数代码。

    接着，我们讨论了 parser 的实现原理，以及如何用有限状态自
动机构造一个词法分析器。词法分析的过程就是状态机在不同状态之
间迁移的过程。在此过程中，状态机会产生一个个 Token，形成一个
Token 列表。我们将使用该 Token 列表来构造用于描述模板的 AST。具
体做法是，扫描 Token 列表并维护一个开始标签栈。每当扫描到一个
开始标签节点，就将其压入栈顶。栈顶的节点始终作为下一个扫描的
节点的父节点。这样，当所有 Token 扫描完毕后，即可构建出一棵树
型 AST。

    然后，我们讨论了 AST 的转换与插件化架构。AST 是树型数据结
构，为了访问 AST 中的节点，我们采用深度优先的方式对 AST 进行遍
历。在遍历过程中，我们可以对 AST 节点进行各种操作，从而实现对
AST 的转换。为了解耦节点的访问和操作，我们设计了插件化架构，
将节点的操作封装到独立的转换函数中。这些转换函数可以通过
context.nodeTransforms 来注册。这里的 context 称为转换上
下文。上下文对象中通常会维护程序的当前状态，例如当前访问的节
点、当前访问的节点的父节点、当前访问的节点的位置索引等信息。
有了上下文对象及其包含的重要信息后，我们即可轻松地实现节点的
替换、删除等能力。但有时，当前访问节点的转换工作依赖于其子节
点的转换结果，所以为了优先完成子节点的转换，我们将整个转换过
程分为“进入阶段”与“退出阶段”。每个转换函数都分两个阶段执行，这
样就可以实现更加细粒度的转换控制。

    之后，我们讨论了如何将模板 AST 转换为用于描述渲染函数的
JavaScript AST。模板 AST 用来描述模板，类似地，JavaScript AST 用
于描述 JavaScript 代码。只有把模板 AST 转换为 JavaScript AST 后，我
们才能据此生成最终的渲染函数代码。

    最后，我们讨论了渲染函数代码的生成工作。代码生成是模板编
译器的最后一步工作，生成的代码将作为组件的渲染函数。代码生成
的过程就是字符串拼接的过程。我们需要为不同的 AST 节点编写对应
的代码生成函数。为了让生成的代码具有更强的可读性，我们还讨论
了如何对生成的代码进行缩进和换行。我们将用于缩进和换行的代码
封装为工具函数，并且定义到代码生成过程中的上下文对象中。
*/