/**
    在本章中，我们首先讨论了 Diff 算法的作用。Diff 算法用来计算
两组子节点的差异，并试图最大程度地复用 DOM 元素。在上一章中，
我们采用了一种简单的方式来更新子节点，即卸载所有旧子节点，再
挂载所有新子节点。然而这种更新方式无法对 DOM 元素进行复用，需
要大量的 DOM 操作才能完成更新，非常消耗性能。于是，我们对它进
行了改进。改进后的方案是，遍历新旧两组子节点中数量较少的那一
组，并逐个调用 patch 函数进行打补丁，然后比较新旧两组子节点的
数量，如果新的一组子节点数量更多，说明有新子节点需要挂载；否
则说明在旧的一组子节点中，有节点需要卸载。

    然后，我们讨论了虚拟节点中 key 属性的作用，它就像虚拟节点
的“身份证号”。在更新时，渲染器通过 key 属性找到可复用的节点，
然后尽可能地通过 DOM 移动操作来完成更新，避免过多地对 DOM 元
素进行销毁和重建。

    接着，我们讨论了简单 Diff 算法是如何寻找需要移动的节点的。
简单 Diff 算法的核心逻辑是，拿新的一组子节点中的节点去旧的一组
子节点中寻找可复用的节点。如果找到了，则记录该节点的位置索
引。我们把这个位置索引称为最大索引。在整个更新过程中，如果一
个节点的索引值小于最大索引，则说明该节点对应的真实 DOM 元素需
要移动。

    最后，我们通过几个例子讲解了渲染器是如何移动、添加、删除
虚拟节点所对应的 DOM 元素的。
 */